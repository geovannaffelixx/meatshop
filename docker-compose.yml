services:
  # ==========================================
  # Banco de Dados - PostgreSQL 17
  # ==========================================
  db:
    image: postgres:17-alpine
    container_name: meatshop-postgres
    environment:
      POSTGRES_DB: meatshop
      POSTGRES_USER: meatshop_user
      POSTGRES_PASSWORD: meatshop_pass
      TZ: America/Sao_Paulo
    ports:
      - "5432:5432"
    volumes:
      - ./meatshop-backend/db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meatshop_user -d meatshop"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # ==========================================
  # Backend - NestJS
  # ==========================================
  backend:
    build:
      context: ./meatshop-backend
      dockerfile: Dockerfile
    container_name: meatshop-backend
    env_file:
      - ./meatshop-backend/.env.docker
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001

      DB_TYPE: postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: meatshop
      DB_SYNCHRONIZE: "false"
      DB_SSL: "false"

      LOG_LEVEL: info
      LOG_DIR: logs
      LOG_MAX_DAYS: 14d
      TYPEORM_LOGGING: "true"
      TZ: America/Sao_Paulo

    volumes:
      - ./meatshop-backend/logs:/usr/src/app/logs
      - ./meatshop-backend/migrations:/usr/src/app/migrations
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    # Limita recursos (evita travamentos em pipelines)
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.75"

  # ==========================================
  # Frontend - Next.js
  # ==========================================
  frontend:
    build:
      context: ./meatshop-main
      dockerfile: Dockerfile
    container_name: meatshop-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:3001
      TZ: America/Sao_Paulo
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.75"

  # ==========================================
  # Prometheus
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.50"

  # ==========================================
  # Grafana
  # ==========================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      TZ: America/Sao_Paulo
    ports:
      - "3002:3000"
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.50"

# ==========================================
# Volumes persistentes
# ==========================================
volumes:
  pgdata:
    driver: local
