name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20
  DB_TYPE: postgres
  DB_HOST: localhost
  DB_PORT: 5432
  DB_USERNAME: meatshop_user
  DB_PASSWORD: meatshop_pass
  DB_DATABASE: meatshop
  DB_SYNCHRONIZE: "false"
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
  COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}

jobs:
  build-test-and-integration:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: meatshop
          POSTGRES_USER: meatshop_user
          POSTGRES_PASSWORD: meatshop_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U meatshop_user -d meatshop"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (with cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            meatshop-backend/package-lock.json
            meatshop-main/package-lock.json
      
      - name: Garantir chaves JWT disponíveis
        run: |
          if [ -z "$JWT_SECRET" ]; then
            echo "⚠️ JWT_SECRET ausente — gerando chave temporária..."
            echo "JWT_SECRET=$(openssl rand -hex 32)" >> $GITHUB_ENV
          fi
          if [ -z "$REFRESH_SECRET" ]; then
            echo "⚠️ REFRESH_SECRET ausente — gerando chave temporária..."
            echo "REFRESH_SECRET=$(openssl rand -hex 32)" >> $GITHUB_ENV
          fi
          if [ -z "$COOKIE_SECRET" ]; then
            echo "⚠️ COOKIE_SECRET ausente — gerando chave temporária..."
            echo "COOKIE_SECRET=$(openssl rand -hex 32)" >> $GITHUB_ENV
          fi

      # =========================
      # BACKEND
      # =========================
      - name: Verificar variáveis obrigatórias
        run: |
          for var in JWT_SECRET REFRESH_SECRET; do
            if [ -z "${!var}" ]; then
              echo "❌ Erro: variável $var não definida!"
              exit 1
            fi
          done

      - name: Backend - Install
        working-directory: meatshop-backend
        run: npm ci

      - name: Backend - Lint
        working-directory: meatshop-backend
        run: npm run lint

      - name: Backend - Typecheck
        working-directory: meatshop-backend
        run: npm run typecheck

      - name: Backend - Run migrations
        working-directory: meatshop-backend
        run: |
          npm run build
          npx typeorm migration:run -d dist/data-source.js

      - name: Backend - Tests (coverage)
        working-directory: meatshop-backend
        run: npm test -- --runInBand --coverage

      - name: Backend - Build
        working-directory: meatshop-backend
        run: npm run build

      # =========================
      # FRONTEND
      # =========================
      - name: Frontend - Install
        working-directory: meatshop-main
        run: npm ci

      - name: Frontend - Lint
        working-directory: meatshop-main
        run: npm run lint

      - name: Frontend - Typecheck
        working-directory: meatshop-main
        run: npm run typecheck

      - name: Frontend - Tests (coverage)
        working-directory: meatshop-main
        run: npm test -- --runInBand --coverage

      - name: Frontend - Build
        working-directory: meatshop-main
        run: npm run build

      # =========================
      # INTEGRAÇÃO (Docker Compose)
      # =========================
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Compose Up (backend+frontend+prometheus+grafana)
        run: |
          set +e
          docker compose up -d --build
          echo "Aguardando backend em http://localhost:3001/health..."
          for i in {1..45}; do
            if curl -fsS http://localhost:3001/health >/dev/null; then
              echo "✅ Backend OK"
              break
            fi
            sleep 2
          done
          curl -fsS http://localhost:3001/health >/dev/null

          echo "📈 Coletando /metrics..."
          curl -fsS http://localhost:3001/metrics > metrics_output.txt

          echo "🌐 Checando frontend em http://localhost:3000 ..."
          for i in {1..45}; do
            if curl -fsS http://localhost:3000 >/dev/null; then
              echo "✅ Frontend OK"
              break
            fi
            sleep 2
          done
          curl -fsS http://localhost:3000 >/dev/null
          set -e

      - name: Capturar logs do Compose
        if: always()
        run: |
          docker compose logs > compose_logs.txt || true
          docker ps -a >> compose_logs.txt

      - name: Upload artifacts (logs, metrics, coverage)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-and-coverage
          path: |
            meatshop-backend/logs
            meatshop-backend/coverage
            meatshop-main/coverage
            metrics_output.txt
            compose_logs.txt
          retention-days: 7
